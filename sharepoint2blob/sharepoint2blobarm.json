{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "SharePointUrl": {
            "defaultValue": "https://microsoft.sharepoint.com/teams/TestSharePointWednesday",
            "type": "String"
        },
        "storageAccounts_armblobqueue_name": {
            "defaultValue": "armqueue2",
            "type": "String"
        },
        "EnqueueInterval": {
            "defaultValue": 1,
            "type": "int"
        }
    },
    "variables": {
        "queueContributorRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
        "storageBlobContributorRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "location": "[resourceGroup().location]",
        "queueRoleGuidId": "[guid(uniqueString(concat(resourceGroup().id,'queue')))]",
        "blobRoleGuidId": "[guid(uniqueString(concat(resourceGroup().id,'blob')))]",
        "connections_sharepointonline_name": "sharepointonline",
        "userAssignedIdentities_sharepoint2blob_mi_name": "sharepoint2blob-mi",
        "connections_azurequeues_name": "azurequeues",
        "connections_azureblob_name": "azureblob",
        "workflows_folder_expansion_logic_app_name": "folder-expansion-logic-app",
        "workflows_file_processing_logic_app_name": "file-processing-logic-app",
        "workflows_sharepoint2blob_timer_app_name": "sharepoint2blob-timer-app"
    },
    "resources": [
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2023-07-31-preview",
            "name": "[variables('userAssignedIdentities_sharepoint2blob_mi_name')]",
            "location": "[variables('location')]"
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2023-01-01",
            "name": "[parameters('storageAccounts_armblobqueue_name')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "kind": "StorageV2",
            "properties": {
                "dnsEndpointType": "Standard",
                "defaultToOAuthAuthentication": false,
                "publicNetworkAccess": "Enabled",
                "allowCrossTenantReplication": false,
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "requireInfrastructureEncryption": false,
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "accessTier": "Hot"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccounts_armblobqueue_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_armblobqueue_name'))]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "cors": {
                    "corsRules": []
                },
                "deleteRetentionPolicy": {
                    "allowPermanentDelete": false,
                    "enabled": true,
                    "days": 7
                },
                "containerDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccounts_armblobqueue_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_armblobqueue_name'))]"
            ],
            "sku": {
                "name": "Standard_RAGRS",
                "tier": "Standard"
            },
            "properties": {
                "protocolSettings": {
                    "smb": {}
                },
                "cors": {
                    "corsRules": []
                },
                "shareDeleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccounts_armblobqueue_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_armblobqueue_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/tableServices",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccounts_armblobqueue_name'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_armblobqueue_name'))]"
            ],
            "properties": {
                "cors": {
                    "corsRules": []
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccounts_armblobqueue_name'), '/default/pending-files')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccounts_armblobqueue_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_armblobqueue_name'))]"
            ],
            "properties": {
                "metadata": {}
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
            "apiVersion": "2023-01-01",
            "name": "[concat(parameters('storageAccounts_armblobqueue_name'), '/default/pending-folders')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccounts_armblobqueue_name'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_armblobqueue_name'))]"
            ],
            "properties": {
                "metadata": {}
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(parameters('storageAccounts_armblobqueue_name'), '/default/sharepoint')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_armblobqueue_name'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(parameters('storageAccounts_armblobqueue_name'), '/Microsoft.Authorization/', variables('queueRoleGuidId'))]",
            "properties": {
                "_comment1": "Role definition IDs from: https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#storage",
                "roleDefinitionId": "[variables('queueContributorRoleId')]",
                "_comment2": "Something like: /subscriptions/my-subscription/resourceGroups/my-other-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myManagedIdentity",
                "principalId": "[reference(variables('userAssignedIdentities_sharepoint2blob_mi_name'), '2018-11-30').principalId]",
                "principalType": "ServicePrincipal"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_armblobqueue_name'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(parameters('storageAccounts_armblobqueue_name'), '/Microsoft.Authorization/', variables('blobRoleGuidId'))]",
            "properties": {
                "_comment1": "Role definition IDs from: https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#storage",
                "roleDefinitionId": "[variables('storageBlobContributorRoleId')]",
                "_comment2": "Something like: /subscriptions/my-subscription/resourceGroups/my-other-resource-group/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myManagedIdentity",
                "principalId": "[reference(variables('userAssignedIdentities_sharepoint2blob_mi_name'), '2018-11-30').principalId]",
                "principalType": "ServicePrincipal"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccounts_armblobqueue_name'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('connections_azurequeues_name')]",
            "location": "[variables('location')]",
            "kind": "V1",
            "properties": {
                "displayName": "MyAzureQueueConnection",
                "customParameterValues": {},
                "authenticatedUser": {},
                "connectionState": "Enabled",
                "parameterValueSet": {
                    "name": "managedIdentityAuth",
                    "values": {}
                },
                "api": {
                    "name": "[variables('connections_azurequeues_name')]",
                    "displayName": "Azure Queues",
                    "description": "Azure Queue storage provides cloud messaging between application components. Queue storage also supports managing asynchronous tasks and building process work flows.",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1680/1.0.1680.3652/', variables('connections_azurequeues_name'), '/icon.png')]",
                    "brandColor": "#0072C6",
                    "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/', variables('connections_azurequeues_name'))]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "testLinks": [
                    {
                        "requestUri": "[concat('https://management.azure.com:443/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/', variables('connections_azurequeues_name'), '/extensions/proxy/testConnection?api-version=2016-06-01')]",
                        "method": "get"
                    }
                ]
            },
             "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccounts_armblobqueue_name'), 'default','pending-folders')]",
                "[resourceId('Microsoft.Storage/storageAccounts/providers/roleAssignments', parameters('storageAccounts_armblobqueue_name'), 'Microsoft.Authorization', variables('queueRoleGuidId'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('connections_azureblob_name')]",
            "location": "[variables('location')]",
            "kind": "V1",
            "properties": {
                "displayName": "MyAzureBlobConnection",
                "customParameterValues": {},
                "authenticatedUser": {},
                "connectionState": "Enabled",
                "parameterValueSet": {
                    "name": "managedIdentityAuth",
                    "values": {}
                },
                "api": {
                    "name": "[variables('connections_azureblob_name')]",
                    "displayName": "Azure Blob",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1680/1.0.1680.3652/', variables('connections_azureblob_name'), '/icon.png')]",
                    "brandColor": "#0072C6",
                    "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/', variables('connections_azureblob_name'))]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "testLinks": [
                    {
                        "requestUri": "[concat('https://management.azure.com:443/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.Web/connections/', variables('connections_azureblob_name'), '/extensions/proxy/testConnection?api-version=2016-06-01')]",
                        "method": "get"
                    }
                ]
            },
             "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccounts_armblobqueue_name'), 'default','sharepoint')]",
                "[resourceId('Microsoft.Storage/storageAccounts/providers/roleAssignments', parameters('storageAccounts_armblobqueue_name'), 'Microsoft.Authorization', variables('blobRoleGuidId'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('connections_sharepointonline_name')]",
            "location": "[variables('location')]",
            "kind": "V1",
            "properties": {
                "customParameterValues": {},
                "nonSecretParameterValues": {},
                "api": {
                    "name": "[variables('connections_sharepointonline_name')]",
                    "displayName": "SharePoint",
                    "description": "SharePoint helps organizations share and collaborate with colleagues, partners, and customers. You can connect to SharePoint Online or to an on-premises SharePoint 2013 or 2016 farm using the On-Premises Data Gateway to manage documents and list items.",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1676/1.0.1676.3617/', variables('connections_sharepointonline_name'), '/icon.png')]",
                    "brandColor": "#036C70",
                    "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/', variables('connections_sharepointonline_name'))]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "testLinks": []
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('workflows_folder_expansion_logic_app_name')]",
            "location": "[variables('location')]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]": {}
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('connections_azurequeues_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('connections_sharepointonline_name'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "SharePointUrl": {
                            "defaultValue": "[parameters('SharePointUrl')]",
                            "type": "String"
                        },
                        "storageAccountName": {
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "When_there_are_messages_in_a_queue_(V2)": {
                            "recurrence": {
                                "frequency": "Second",
                                "interval": 1
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Second",
                                "interval": 1
                            },
                            "splitOn": "@triggerBody()?['QueueMessagesList']?['QueueMessage']",
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azurequeues']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/queues/@{encodeURIComponent('pending-folders')}/message_trigger"
                            }
                        }
                    },
                    "actions": {
                        "Condition_3": {
                            "actions": {
                                "For_each_blob_file": {
                                    "foreach": "@body('Lists_blobs_(V2)')?['value']",
                                    "actions": {
                                        "Condition_-_is_folder": {
                                            "actions": {
                                                "Condition_2": {
                                                    "actions": {
                                                        "For_each_2": {
                                                            "foreach": "@body('Lists_Folder_blobs')?['value']",
                                                            "actions": {
                                                                "Delete_blob_(V2)": {
                                                                    "runAfter": {},
                                                                    "type": "ApiConnection",
                                                                    "inputs": {
                                                                        "headers": {
                                                                            "SkipDeleteIfFileNotFoundOnServer": false
                                                                        },
                                                                        "host": {
                                                                            "connection": {
                                                                                "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                                            }
                                                                        },
                                                                        "method": "delete",
                                                                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(items('For_each_2')?['Path']))}"
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "Lists_Folder_blobs": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Foreach"
                                                        },
                                                        "Lists_Folder_blobs": {
                                                            "runAfter": {},
                                                            "type": "ApiConnection",
                                                            "inputs": {
                                                                "host": {
                                                                    "connection": {
                                                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                                    }
                                                                },
                                                                "method": "get",
                                                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/foldersV2/@{encodeURIComponent(encodeURIComponent(items('For_each_blob_file')?['Path']))}",
                                                                "queries": {
                                                                    "nextPageMarker": "",
                                                                    "useFlatListing": false
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {},
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "not": {
                                                                    "contains": [
                                                                        "@body('Join_file_names_in_FileNameList')",
                                                                        "@replace(items('For_each_blob_file')?['Name'],'/','')"
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                }
                                            },
                                            "runAfter": {},
                                            "else": {
                                                "actions": {
                                                    "Condition_4": {
                                                        "actions": {
                                                            "Delete_blob_(V2)_2": {
                                                                "runAfter": {},
                                                                "type": "ApiConnection",
                                                                "inputs": {
                                                                    "headers": {
                                                                        "SkipDeleteIfFileNotFoundOnServer": false
                                                                    },
                                                                    "host": {
                                                                        "connection": {
                                                                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                                        }
                                                                    },
                                                                    "method": "delete",
                                                                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/files/@{encodeURIComponent(encodeURIComponent(items('For_each_blob_file')?['Path']))}"
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {},
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "not": {
                                                                        "contains": [
                                                                            "@body('Join_file_names_in_FileNameList')",
                                                                            "@items('For_each_blob_file')?['Name']"
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@items('For_each_blob_file')?['IsFolder']",
                                                            true
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {},
                                    "type": "Foreach"
                                }
                            },
                            "runAfter": {
                                "Join_file_names_in_FileNameList": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@int(outputs('Lists_blobs_(V2)')?['statusCode'])",
                                            200
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Delete_message_(V2)": {
                            "runAfter": {
                                "Condition_3": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azurequeues']['connectionId']"
                                    }
                                },
                                "method": "delete",
                                "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/queues/@{encodeURIComponent('pending-folders')}/messages/@{encodeURIComponent(triggerBody()?['MessageId'])}",
                                "queries": {
                                    "popreceipt": "@triggerBody()?['PopReceipt']"
                                }
                            }
                        },
                        "For_Each_Group_Find_Users": {
                            "foreach": "@body('SharepointGroups')",
                            "actions": {
                                "For_each": {
                                    "foreach": "@body('GroupUsers')",
                                    "actions": {
                                        "Append_to_array_variable_2": {
                                            "runAfter": {},
                                            "type": "AppendToArrayVariable",
                                            "inputs": {
                                                "name": "UsersArray",
                                                "value": "@items('For_each')"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "GroupUsers": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "GroupUsers": {
                                    "runAfter": {
                                        "GroupUsers_JSON": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Select",
                                    "inputs": {
                                        "from": "@body('GroupUsers_JSON')?['d']?['results']",
                                        "select": {
                                            "GroupId": "@items('For_Each_Group_Find_Users')?['ID']",
                                            "Id": "@item()?['Id']",
                                            "LoginName": "@item()?['LoginName']",
                                            "PrincipleType": "@item()?['PrincipalType']",
                                            "Title": "@item()?['Title']",
                                            "UPN": "@item()?['UserPrincipalName']"
                                        }
                                    }
                                },
                                "GroupUsers_JSON": {
                                    "runAfter": {
                                        "Send_an_HTTP_request_to_SharePoint_4": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Send_an_HTTP_request_to_SharePoint_4')",
                                        "schema": {
                                            "properties": {
                                                "d": {
                                                    "properties": {
                                                        "results": {
                                                            "items": {
                                                                "properties": {
                                                                    "Id": {
                                                                        "type": "integer"
                                                                    },
                                                                    "LoginName": {
                                                                        "type": "string"
                                                                    },
                                                                    "PrincipalType": {
                                                                        "type": "integer"
                                                                    },
                                                                    "Title": {
                                                                        "type": "string"
                                                                    },
                                                                    "UserPrincipalName": {
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                },
                                "Send_an_HTTP_request_to_SharePoint_4": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "method": "GET",
                                            "uri": "_api/Web/SiteGroups/GetById(@{items('For_Each_Group_Find_Users')?['ID']})/Users"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['sharepointonline']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/datasets/@{encodeURIComponent(encodeURIComponent(parameters('SharePointUrl')))}/httprequest"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_UsersArray": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_Item_in_the_list": {
                            "foreach": "@body('Parse_JSON')?['ListData']?['Row']",
                            "actions": {
                                "Append_to_FileNameList": {
                                    "runAfter": {
                                        "Condition": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "FileNameList",
                                        "value": "@items('For_each_Item_in_the_list')?['FileLeafRef']"
                                    }
                                },
                                "Condition": {
                                    "actions": {
                                        "Insert_folder_into_pending-folders_queue": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@{substring(items('For_each_Item_in_the_list')?['FileRef'],indexOf(items('For_each_Item_in_the_list')?['FileRef'], '/Shared documents'))}",
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azurequeues']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/queues/@{encodeURIComponent('pending-folders')}/messages"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "else": {
                                        "actions": {
                                            "Condition_file_extension": {
                                                "actions": {
                                            "Insert_file_into_pending-files_queue": {
                                                "runAfter": {},
                                                "type": "ApiConnection",
                                                "inputs": {
                                                    "body": "{\n\"Id\": \"@{items('For_each_Item_in_the_list')?['ID']}\",\n\"fileRef\": \"@{items('For_each_Item_in_the_list')?['FileRef']}\",\n\"fileRelativePath\": \"@{split(slice(items('For_each_Item_in_the_list')?['FileRef'],0,lastIndexOf(items('For_each_Item_in_the_list')?['FileRef'],items('For_each_Item_in_the_list')?['FileLeafRef'])),'/Shared Documents')[1]}\",\n\"fileName\": \"@{items('For_each_Item_in_the_list')?['FileLeafRef']}\",\n\"fileExtension\": \"@{items('For_each_Item_in_the_list')?['FileLeafRef.Suffix']}\",\n\"listName\":\"@{body('Parse_JSON')?['listName']}\",\n\"users\": @{variables('UsersArray')}\n}",
                                                    "host": {
                                                        "connection": {
                                                            "name": "@parameters('$connections')['azurequeues']['connectionId']"
                                                        }
                                                    },
                                                    "method": "post",
                                                    "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/queues/@{encodeURIComponent('pending-files')}/messages"
                                                }
                                            }
                                                },
                                                "runAfter": {},
                                                "expression": {
                                                    "or": [
                                                        {
                                                            "equals": [
                                                                "@items('For_each_Item_in_the_list')?['FileLeafRef.Suffix']",
                                                                "pdf"
                                                            ]
                                                        },
                                                        {
                                                            "equals": [
                                                                "@items('For_each_Item_in_the_list')?['FileLeafRef.Suffix']",
                                                                "docx"
                                                            ]
                                                        },
                                                        {
                                                            "equals": [
                                                                "@items('For_each_Item_in_the_list')?['FileLeafRef.Suffix']",
                                                                "pptx"
                                                            ]
                                                        },
                                                        {
                                                            "equals": [
                                                                "@items('For_each_Item_in_the_list')?['FileLeafRef.Suffix']",
                                                                "txt"
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@items('For_each_Item_in_the_list')?['FSObjType']",
                                                    "1"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_FileNameList": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Groups_JSON": {
                            "runAfter": {
                                "Send_an_HTTP_request_to_SharePoint_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Send_an_HTTP_request_to_SharePoint_2')",
                                "schema": {
                                    "properties": {
                                        "d": {
                                            "properties": {
                                                "results": {
                                                    "items": {
                                                        "properties": {
                                                            "Id": {
                                                                "type": "integer"
                                                            },
                                                            "LoginName": {
                                                                "type": "string"
                                                            },
                                                            "PrincipalType": {
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "required": [
                                                            "Id",
                                                            "LoginName",
                                                            "PrincipalType"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Initialize_UsersArray": {
                            "runAfter": {
                                "SharepointGroups": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "UsersArray",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {
                                "For_Each_Group_Find_Users": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "SharePointEntryPoint",
                                        "type": "string",
                                        "value": "@{split(parameters('SharePointUrl'),'.com')[1]}"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_FileNameList": {
                            "runAfter": {
                                "Set_Current_ListName": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "FileNameList",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Join_file_names_in_FileNameList": {
                            "runAfter": {
                                "For_each_Item_in_the_list": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Join",
                            "inputs": {
                                "from": "@variables('FileNameList')",
                                "joinWith": ","
                            }
                        },
                        "Lists_blobs_(V2)": {
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "metadata": {
                                "JTJmc2hhcmVwb2ludA==": "/sharepoint"
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/foldersV2/@{encodeURIComponent(encodeURIComponent(replace(toLower(triggerBody()?['MessageText']),'/shared documents', '/sharepoint')))}",
                                "queries": {
                                    "nextPageMarker": "",
                                    "useFlatListing": false
                                }
                            }
                        },
                        "Parse_JSON": {
                            "runAfter": {
                                "Send_an_HTTP_request_to_SharePoint": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Send_an_HTTP_request_to_SharePoint')",
                                "schema": {
                                    "properties": {
                                        "ListData": {
                                            "properties": {
                                                "Row": {
                                                    "items": {
                                                        "properties": {
                                                            "FSObjType": {
                                                                "type": "string"
                                                            },
                                                            "FileLeafRef": {
                                                                "type": "string"
                                                            },
                                                            "FileLeafRef.Suffix": {
                                                                "type": "string"
                                                            },
                                                            "FileRef": {
                                                                "type": "string"
                                                            },
                                                            "ID": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": "array"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "listName": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Send_an_HTTP_request_to_SharePoint": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "body": "{\n\"parameters\":{\n\"RenderOptions\":1480455,\"AllowMultipleValueFilterForTaxonomyFields\":true,\"AddRequiredFields\":true,\"RequireFolderColoringFields\":true}}",
                                    "method": "POST",
                                    "uri": "@{concat('_api/web/GetListUsingPath(DecodedUrl=@a1)/RenderListDataAsStream?@a1=%27',encodeUriComponent(variables('SharePointEntryPoint')),encodeUriComponent('/Shared Documents'),'%27&RootFolder=',encodeUriComponent(variables('SharePointEntryPoint')), encodeUriComponent(triggerBody()?['MessageText']))}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sharepointonline']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/@{encodeURIComponent(encodeURIComponent(parameters('SharePointUrl')))}/httprequest"
                            }
                        },
                        "Send_an_HTTP_request_to_SharePoint_2": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "method": "GET",
                                    "uri": "_api/Web/SiteGroups"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sharepointonline']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/@{encodeURIComponent(encodeURIComponent(parameters('SharePointUrl')))}/httprequest"
                            }
                        },
                        "Set_Current_ListName": {
                            "runAfter": {
                                "Lists_blobs_(V2)": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@replace(replace(body('Parse_JSON')?['listName'],'{',''),'}','')"
                        },
                        "SharepointGroups": {
                            "runAfter": {
                                "Groups_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select",
                            "inputs": {
                                "from": "@body('Groups_JSON')?['d']?['results']",
                                "select": {
                                    "ID": "@item()?['Id']",
                                    "LoginName": "@item()?['LoginName']",
                                    "PrincipleType": "@item()?['PrincipalType']"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]",
                                "connectionName": "[variables('connections_azureblob_name')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "identity": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/',variables('connections_azureblob_name'))]"
                            },
                            "azurequeues": {
                                "connectionId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name, '/providers/Microsoft.Web/connections/',variables('connections_azurequeues_name'))]",
                                "connectionName": "[variables('connections_azurequeues_name')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "identity": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/',variables('connections_azurequeues_name'))]"
                            },
                            "sharepointonline": {
                                "connectionId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name, '/providers/Microsoft.Web/connections/',variables('connections_sharepointonline_name'))]",
                                "connectionName": "[variables('connections_sharepointonline_name')]",
                                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/',variables('connections_sharepointonline_name'))]"
                            }
                        }
                    },
                    "SharePointUrl": {
                                "value": "[parameters('SharePointUrl')]"
                    },
                    "storageAccountName": {
                        "value": "[parameters('storageAccounts_armblobqueue_name')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('workflows_file_processing_logic_app_name')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('connections_azurequeues_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('connections_sharepointonline_name'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]": {}
                }
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "SharePointUrl": {
                            "defaultValue": "[parameters('SharePointUrl')]",
                            "type": "String"
                        },
                        "storageAccountName": {
                            "type": "String"
                        },
                        "BlobContainerName": {
                            "defaultValue": "sharepoint",
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "When_there_are_messages_in_a_queue_(V2)": {
                            "recurrence": {
                                "frequency": "Second",
                                "interval": 3
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Second",
                                "interval": 3
                            },
                            "splitOn": "@triggerBody()?['QueueMessagesList']?['QueueMessage']",
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azurequeues']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/queues/@{encodeURIComponent('pending-files')}/message_trigger"
                            }
                        }
                    },
                    "actions": {
                        "Condition": {
                            "actions": {
                                "For_each_Blob_permitted_id": {
                                    "foreach": "@variables('BlobPermittedIds')",
                                    "actions": {
                                        "Membership_Test": {
                                            "actions": {},
                                            "runAfter": {},
                                            "else": {
                                                "actions": {
                                                    "Set_variable_PermissionsChanged": {
                                                        "runAfter": {},
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "PermissionsChanged",
                                                            "value": true
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "contains": [
                                                            "@body('Join')",
                                                            "@items('For_each_Blob_permitted_id')"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {
                                        "Set_variable": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "For_each_permission_in_Sharepoint_API_Response": {
                                    "foreach": "@variables('FileUsersArray')",
                                    "actions": {
                                        "Condition_2": {
                                            "actions": {},
                                            "runAfter": {},
                                            "else": {
                                                "actions": {
                                                    "Set_variable_PermissionsChanged_2": {
                                                        "runAfter": {},
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "PermissionsChanged",
                                                            "value": true
                                                        }
                                                    }
                                                }
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "contains": [
                                                            "@outputs('GetBlobMetadata')['headers']?['x-ms-meta-permittedIds']",
                                                            "@items('For_each_permission_in_Sharepoint_API_Response')"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {
                                        "For_each_Blob_permitted_id": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                },
                                "If_PermissinsChanged_": {
                                    "actions": {
                                        "HTTP": {
                                            "runAfter": {},
                                            "type": "Http",
                                            "inputs": {
                                                "authentication": {
                                                    "audience": "https://storage.azure.com/",
                                                     "identity": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                                                    "type": "ManagedServiceIdentity"
                                                },
                                                "headers": {
                                                    "x-ms-blob-type": "BlockBlob",
                                                    "x-ms-date": "@{formatDateTime(utcNow(),'r')}",
                                                    "x-ms-meta-lastmodified": "@body('Get_file_metadata_2')?['LastModified']",
                                                    "x-ms-meta-permittedIds": "[[@{body('Join')}]",
                                                    "x-ms-meta-sharepointUrl": "@{parameters('SharePointUrl')}@{body('Get_file_metadata_2')?['Path']}",
                                                    "x-ms-version": "2019-02-02"
                                                },
                                                "method": "PUT",
                                                "queries": {
                                                    "comp": "metadata"
                                                },
                                                "uri": "@{concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/',parameters('BlobContainerName'),body('Parse_JSON_-_Queue')?['fileRelativePath'],body('Parse_JSON_-_Queue')?['fileName'])}"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "For_each_permission_in_Sharepoint_API_Response": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('PermissionsChanged')",
                                                    true
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Set_variable": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "BlobPermittedIds",
                                        "value": "@split(replace(substring(outputs('GetBlobMetadata')['headers']?['x-ms-meta-permittedIds'],1),']',''),',')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_BlobPermittedIds": [
                                    "Succeeded"
                                ]
                            },
                            "else": {
                                "actions": {
                                    "Create_blob_(V2)_2": {
                                        "runAfter": {
                                            "Get_file_content_2": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "body": "@body('Get_file_content_2')",
                                            "headers": {
                                                "ReadFileMetadataFromServer": true
                                            },
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                                                }
                                            },
                                            "method": "post",
                                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/files",
                                            "queries": {
                                                "folderPath": "@{concat(parameters('BlobContainerName'),body('Parse_JSON_-_Queue')?['fileRelativePath'])}",
                                                "name": "@body('Parse_JSON_-_Queue')?['fileName']",
                                                "queryParametersSingleEncoded": true
                                            }
                                        },
                                        "runtimeConfiguration": {
                                            "contentTransfer": {
                                                "transferMode": "Chunked"
                                            }
                                        }
                                    },
                                    "Get_file_content_2": {
                                        "runAfter": {},
                                        "type": "ApiConnection",
                                        "inputs": {
                                            "host": {
                                                "connection": {
                                                    "name": "@parameters('$connections')['sharepointonline']['connectionId']"
                                                }
                                            },
                                            "method": "get",
                                            "path": "/datasets/@{encodeURIComponent(encodeURIComponent(parameters('SharePointUrl')))}/files/@{encodeURIComponent(encodeUriComponent(concat('/Shared documents',body('Parse_JSON_-_Queue')?['fileRelativePath'],body('Parse_JSON_-_Queue')?['fileName'])))}/content",
                                            "queries": {
                                                "inferContentType": true
                                            }
                                        }
                                    },
                                    "HTTP_2": {
                                        "runAfter": {
                                            "Create_blob_(V2)_2": [
                                                "Succeeded"
                                            ]
                                        },
                                        "type": "Http",
                                        "inputs": {
                                            "authentication": {
                                                "audience": "https://storage.azure.com/",
                                                "identity": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                                                "type": "ManagedServiceIdentity"
                                            },
                                            "headers": {
                                                "x-ms-blob-type": "BlockBlob",
                                                "x-ms-date": "@{formatDateTime(utcNow(),'r')}",
                                                "x-ms-meta-lastmodified": "@body('Get_file_metadata_2')?['LastModified']",
                                                "x-ms-meta-permittedIds": "[[@{body('Join')}]",
                                                "x-ms-meta-sharepointUrl": "@{parameters('SharePointUrl')}@{body('Get_file_metadata_2')?['Path']}",
                                                "x-ms-version": "2019-02-02"
                                            },
                                            "method": "PUT",
                                            "queries": {
                                                "comp": "metadata"
                                            },
                                            "uri": "@{concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/',parameters('BlobContainerName'),body('Parse_JSON_-_Queue')?['fileRelativePath'],body('Parse_JSON_-_Queue')?['fileName'])}"
                                        }
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@outputs('GetBlobMetadata')['statusCode']",
                                            200
                                        ]
                                    },
                                    {
                                        "equals": [
                                            "@outputs('GetBlobMetadata')['headers']?['x-ms-meta-lastmodified']",
                                            "@body('Get_file_metadata_2')?['LastModified']"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Delete_message_(V2)": {
                            "runAfter": {
                                "Condition": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azurequeues']['connectionId']"
                                    }
                                },
                                "method": "delete",
                                "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/queues/@{encodeURIComponent('pending-files')}/messages/@{encodeURIComponent(triggerBody()?['MessageId'])}",
                                "queries": {
                                    "popreceipt": "@triggerBody()?['PopReceipt']"
                                }
                            }
                        },
                        "For_each_permission_in_the_file": {
                            "foreach": "@body('Select_FileSharingInformation')",
                            "actions": {
                                "Switch": {
                                    "runAfter": {},
                                    "cases": {
                                        "Case": {
                                            "case": 8,
                                            "actions": {
                                                "Filter_array_-_users": {
                                                    "runAfter": {},
                                                    "type": "Query",
                                                    "inputs": {
                                                        "from": "@body('Parse_JSON_-_Queue')?['users']",
                                                        "where": "@and(equals(item()?['GroupId'], items('For_each_permission_in_the_file')['groupId']),equals(item()?['principleType'], 4))"
                                                    }
                                                },
                                                "For_each_user_in_filtered_users": {
                                                    "foreach": "@body('Filter_array_-_users')",
                                                    "actions": {
                                                        "Append_to_array_variable": {
                                                            "runAfter": {},
                                                            "type": "AppendToArrayVariable",
                                                            "inputs": {
                                                                "name": "FileUsersArray",
                                                                "value": "@{split(items('For_each_user_in_filtered_users')['loginName'],'|')[2]}"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Filter_array_-_users": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Foreach"
                                                }
                                            }
                                        },
                                        "Case_2": {
                                            "case": 4,
                                            "actions": {
                                                "Append_to_array_variable_2": {
                                                    "runAfter": {},
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "FileUsersArray",
                                                        "value": "@split(items('For_each_permission_in_the_file')['loginName'],'|')[2]"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "default": {
                                        "actions": {}
                                    },
                                    "expression": "@items('For_each_permission_in_the_file')?['principalType']",
                                    "type": "Switch"
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_-_FileUsersArray": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "GetBlobMetadata": {
                            "runAfter": {
                                "Get_file_metadata_2": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Http",
                            "inputs": {
                                "authentication": {
                                    "audience": "https://storage.azure.com/",
                                    "identity": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                                    "type": "ManagedServiceIdentity"
                                },
                                "headers": {
                                    "x-ms-blob-type": "BlockBlob",
                                    "x-ms-date": "@{formatDateTime(utcNow(),'r')}",
                                    "x-ms-version": "2019-02-02"
                                },
                                "method": "GET",
                                "queries": {
                                    "comp": "metadata"
                                },
                                "uri": "@{concat('https://',parameters('storageAccountName'),'.blob.core.windows.net/',parameters('BlobContainerName'),body('Parse_JSON_-_Queue')?['fileRelativePath'],body('Parse_JSON_-_Queue')?['fileName'])}"
                            }
                        },
                        "Get_File_Sharing_Information": {
                            "runAfter": {
                                "Parse_JSON_-_Queue": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "method": "POST",
                                    "uri": "@{concat('_api/web/Lists(@a1)/GetItemById(@a2)/GetSharingInformation?@a1=%27',encodeUriComponent(replace(replace(body('Parse_JSON_-_Queue')?['listName'],'{',''),'}','')),'%27&@a2=',body('Parse_JSON_-_Queue')?['Id'],'%27&$Expand=pickerSettings,permissionsInformation,sharingLinkTemplates,addressBarLinkSettings')}"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sharepointonline']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/datasets/@{encodeURIComponent(encodeURIComponent(parameters('SharePointUrl')))}/httprequest"
                            }
                        },
                        "Get_file_metadata_2": {
                            "runAfter": {
                                "Join": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['sharepointonline']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/datasets/@{encodeURIComponent(encodeURIComponent(parameters('SharePointUrl')))}/files/@{encodeURIComponent(encodeUriComponent(concat('/Shared documents',body('Parse_JSON_-_Queue')?['fileRelativePath'],body('Parse_JSON_-_Queue')?['fileName'])))}"
                            }
                        },
                        "Initialize_variable_-_FileUsersArray": {
                            "runAfter": {
                                "Select_FileSharingInformation": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "FileUsersArray",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_BlobPermittedIds": {
                            "runAfter": {
                                "Initialize_variable_PermissionsChanged": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "BlobPermittedIds",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_PermissionsChanged": {
                            "runAfter": {
                                "GetBlobMetadata": [
                                    "Succeeded",
                                    "TimedOut",
                                    "Skipped",
                                    "Failed"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "PermissionsChanged",
                                        "type": "boolean",
                                        "value": false
                                    }
                                ]
                            }
                        },
                        "Join": {
                            "runAfter": {
                                "For_each_permission_in_the_file": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Join",
                            "inputs": {
                                "from": "@variables('FileUsersArray')",
                                "joinWith": ","
                            }
                        },
                        "Parse_JSON_-_FileSharingInformation": {
                            "runAfter": {
                                "Get_File_Sharing_Information": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Get_File_Sharing_Information')",
                                "schema": {
                                    "properties": {
                                        "d": {
                                            "properties": {
                                                "permissionsInformation": {
                                                    "properties": {
                                                        "principals": {
                                                            "properties": {
                                                                "results": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "principal": {
                                                                                "properties": {
                                                                                    "id": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "loginName": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "principalType": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "userPrincipalName": {
                                                                                        "type": [
                                                                                            "string",
                                                                                            "null"
                                                                                        ]
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Parse_JSON_-_Queue": {
                            "runAfter": {},
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@triggerBody()?['MessageText']",
                                "schema": {
                                    "properties": {
                                        "Id": {
                                            "type": "string"
                                        },
                                        "fileExtension": {
                                            "type": "string"
                                        },
                                        "fileName": {
                                            "type": "string"
                                        },
                                        "fileRef": {
                                            "type": "string"
                                        },
                                        "fileRelativePath": {
                                            "type": "string"
                                        },
                                        "listName": {
                                            "type": "string"
                                        },
                                        "users": {
                                            "items": {
                                                "properties": {
                                                    "GroupId": {
                                                        "type": "integer"
                                                    },
                                                    "Id": {
                                                        "type": "integer"
                                                    },
                                                    "LoginName": {
                                                        "type": "string"
                                                    },
                                                    "PrincipleType": {
                                                        "type": "integer"
                                                    },
                                                    "Title": {
                                                        "type": "string"
                                                    },
                                                    "UPN": {
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "Select_FileSharingInformation": {
                            "runAfter": {
                                "Parse_JSON_-_FileSharingInformation": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Select",
                            "inputs": {
                                "from": "@body('Parse_JSON_-_FileSharingInformation')?['d']?['permissionsInformation']?['principals']?['results']",
                                "select": {
                                    "UPN": "@item()?['principal']?['userPrincipalName']",
                                    "groupId": "@item()?['principal']?['id']",
                                    "loginName": "@item()?['principal']?['loginName']",
                                    "name": "@item()?['principal']?['name']",
                                    "principalType": "@item()?['principal']?['principalType']"
                                }
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureblob": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('connections_azureblob_name'))]",
                                "connectionName": "[variables('connections_azureblob_name')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "identity": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/',variables('connections_azureblob_name'))]"
                            },
                            "azurequeues": {
                                "connectionId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name, '/providers/Microsoft.Web/connections/',variables('connections_azurequeues_name'))]",
                                "connectionName": "[variables('connections_azurequeues_name')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "identity": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/',variables('connections_azurequeues_name'))]"
                            },
                            "sharepointonline": {
                                "connectionId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name, '/providers/Microsoft.Web/connections/',variables('connections_sharepointonline_name'))]",
                                "connectionName": "[variables('connections_sharepointonline_name')]",
                                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/',variables('connections_sharepointonline_name'))]"
                            }
                        }
                    },
                    "SharePointUrl": {
                        "value": "[parameters('SharePointUrl')]"
                    },
                    "storageAccountName": {
                        "value": "[parameters('storageAccounts_armblobqueue_name')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[variables('workflows_sharepoint2blob_timer_app_name')]",
            "location": "[variables('location')]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]": {}
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                "[resourceId('Microsoft.Web/connections', variables('connections_azurequeues_name'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "EnqueueInterval": {
                            "defaultValue": 3,
                            "type": "Int"
                        },
                        "storageAccountName": {
                            "type": "String"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": "@parameters('EnqueueInterval')"
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Hour",
                                "interval": 3
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Put_a_message_on_a_queue_(V2)": {
                            "runAfter": {},
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "/Shared documents",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azurequeues']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent(parameters('storageAccountName')))}/queues/@{encodeURIComponent('pending-folders')}/messages"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azurequeues": {
                                "connectionId": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name, '/providers/Microsoft.Web/connections/',variables('connections_azurequeues_name'))]",
                                "connectionName": "[variables('connections_azurequeues_name')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "identity": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',variables('userAssignedIdentities_sharepoint2blob_mi_name'))]",
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat('/subscriptions/',subscription().subscriptionId,'/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/',variables('connections_azurequeues_name'))]"
                            }
                        }
                    },
                    "storageAccountName": {
                        "value": "[parameters('storageAccounts_armblobqueue_name')]"
                    },
                    "EnqueueInterval": {
                        "value": "[parameters('EnqueueInterval')]"
                    }
                }
            }
        }
    ]
}